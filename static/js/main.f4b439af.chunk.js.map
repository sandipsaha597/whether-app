{"version":3,"sources":["components/showWhether.js","App.js","serviceWorker.js","index.js"],"names":["ShowWhether","state","current_city","current_region","current_country","location","temp_c","options","dataLabels","enabled","stroke","curve","title","text","align","style","fontSize","xaxis","type","axisBorder","show","axisTicks","yaxis","tickAmount","floating","labels","color","offsetY","offsetX","fill","opacity","tooltip","x","format","fixed","position","grid","lines","padding","left","series","name","data","y","errors","forecast","handleChange","input","e","console","log","_this","setState","Object","defineProperty","target","value","seeTemp","preventDefault","getTemp","this","_this2","axios","get","then","res","city","catch","err","_this3","concat","region","country","current","whetherForecast","_this4","post","forecastday","map","date","day","avgtemp_c","_this5","_this$state","react_default","a","createElement","className","MuiThemeProvider_default","Fragment","TextField_default","hintText","onChange","floatingLabelText","onKeyPress","ev","key","submit","RaisedButton_default","label","primary","styles","button","onClick","react_apexcharts_min_default","height","width","Component","margin","App","showWhether","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ySAOMA,6MACJC,MAAQ,CACNC,aAAc,GACdC,eAAgB,GAChBC,gBAAiB,GACjBC,SAAU,GACVC,OAAQ,GACRC,QAAS,CACPC,WAAY,CACVC,SAAS,GAEXC,OAAQ,CACNC,MAAO,UAGTC,MAAO,CACLC,KAAM,mBACNC,MAAO,SACPC,MAAO,CACLC,SAAU,SAGdC,MAAO,CACLC,KAAM,WAENC,WAAY,CACVC,MAAM,GAERC,UAAW,CACTD,MAAM,IAGVE,MAAO,CACLC,WAAY,EACZC,UAAU,EAEVC,OAAQ,CACNV,MAAO,CACLW,MAAO,WAETC,SAAU,EACVC,QAAS,GAEXT,WAAY,CACVC,MAAM,GAERC,UAAW,CACTD,MAAM,IAGVS,KAAM,CACJC,QAAS,IAEXC,QAAS,CACPC,EAAG,CACDC,OAAQ,UAEVC,MAAO,CACLzB,SAAS,EACT0B,SAAU,aAGdC,KAAM,CACJd,MAAO,CACLe,MAAO,CACLT,SAAU,KAGdU,QAAS,CACPC,KAAM,MAIZC,OAAQ,CAAC,CACPC,KAAM,UACNC,KAAM,CAAC,CACHV,EAAG,aACHW,EAAG,GAEL,CACEX,EAAG,aACHW,EAAG,GAEL,CACEX,EAAG,aACHW,EAAG,GAEL,CACEX,EAAG,aACHW,EAAG,GAEL,CACEX,EAAG,aACHW,EAAG,GAEL,CACEX,EAAG,aACHW,EAAG,GAEL,CACEX,EAAG,aACHW,EAAG,MAITC,OAAQ,CACNvC,SAAU,GACVwC,SAAU,OA4CdC,aAAe,SAAAC,GAAK,OAAI,SAAAC,GACtBC,QAAQC,IAAI,cACZC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAgBN,EAAQC,EAAEO,OAAOC,YAGnCC,QAAU,SAACT,GACTA,EAAEU,iBACFP,EAAKQ,+FA9CLC,KAAKvD,8CAGI,IAAAwD,EAAAD,KACTE,IAAMC,IAAN,8BACGC,KAAK,SAAAC,GAEJJ,EAAKT,SAAS,CAAC/C,SAAU4D,EAAIvB,KAAKwB,MAAO,SAAAlB,GAAC,OAAIa,EAAKF,cAEpDQ,MAAM,SAACC,GAAD,OAASnB,QAAQC,IAAI,sDAItB,IAAAmB,EAAAT,KACRE,IAAMC,IAAN,+EAAAO,OAAyFV,KAAK3D,MAAMI,WACjG2D,KAAK,SAAAC,GACJI,EAAKjB,SAAS,CACZlD,aAAc+D,EAAIvB,KAAKrC,SAASoC,KAChCtC,eAAgB8D,EAAIvB,KAAKrC,SAASkE,OAClCnE,gBAAiB6D,EAAIvB,KAAKrC,SAASmE,QACnClE,OAAQ2D,EAAIvB,KAAK+B,QAAQnE,OACzBsC,OAAQ,CACNvC,SAAU,KAEX,SAAA2C,GAAC,OAAIqB,EAAKK,sBAEdP,MAAM,SAACC,GACNC,EAAKjB,SAAS,CACZR,OAAQ,CACNvC,SAAQ,IAAAiE,OAAMD,EAAKpE,MAAMI,SAAjB,+DAoBA,IAAAsE,EAAAf,KAChBX,QAAQC,IAAIU,KAAK3D,OACjB6D,IAAMc,KAAN,gFAAAN,OAA2FV,KAAK3D,MAAMC,aAAtG,YACG8D,KAAK,SAAAC,GACJU,EAAKvB,SAAS,CACZZ,OAAQ,CAAC,CACPE,KAAMuB,EAAIvB,KAAKG,SAASgC,YAAYC,IAAK,SAAAtB,GACvC,MAAO,CAACxB,EAAGwB,EAAMuB,KAAKpC,EAAEa,EAAMwB,IAAIC,mBAKzCd,MAAM,SAACC,GAAD,OAASnB,QAAQC,IAAI,2DAGvB,IAAAgC,EAAAtB,KAAAuB,EACyEvB,KAAK3D,MAAhFK,EADE6E,EACF7E,OAAQJ,EADNiF,EACMjF,aAAcC,EADpBgF,EACoBhF,eAAgBC,EADpC+E,EACoC/E,gBAAiBwC,EADrDuC,EACqDvC,OAAQvC,EAD7D8E,EAC6D9E,SACpE,OACE+E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,KACED,EAAAC,EAAAC,cAACF,EAAAC,EAAMI,SAAP,KACEL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAWM,SAAS,kBAAkBC,SAAUhC,KAAKd,aAAa,YAAa+C,kBAAkB,kBAAkBrC,MAAOnD,EACxHyF,WAAY,SAACC,GACX9C,QAAQC,IAAR,mBAAAoB,OAA+ByB,EAAGC,MACnB,UAAXD,EAAGC,MAELD,EAAGrC,iBACHwB,EAAKe,aAKXb,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CACEc,MAAM,WACNC,SAAS,EACTrF,MAAOsF,EAAOC,OACdC,QAAS3C,KAAKH,YAKpB2B,EAAAC,EAAAC,cAAA,SAAI1C,EAAOvC,UACX+E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,sBAAcpF,EAAd,KAA8BC,EAA9B,KAAgDC,GAChDgF,EAAAC,EAAAC,cAAA,oBAAYhF,IAEd8E,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CACE9E,QAASqD,KAAK3D,MAAMM,QACpBiC,OAAQoB,KAAK3D,MAAMuC,OACnBtB,KAAK,OACLuF,OAAO,MACPC,MAAM,iBApNUC,aA2NpBN,EAAS,CACbC,OAAQ,CACNM,OAAQ,SAQG5G,ICrNA6G,2LAdX,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACwB,EAAD,eAPQH,cCMEI,QACW,cAA7BC,OAAO3G,SAAS4G,UAEe,UAA7BD,OAAO3G,SAAS4G,UAEhBD,OAAO3G,SAAS4G,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1D,KAAK,SAAA2D,GACjCA,EAAaC","file":"static/js/main.f4b439af.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport axios from 'axios'\r\nimport Chart from 'react-apexcharts'\r\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\r\nimport TextField from 'material-ui/TextField'\r\nimport RaisedButton from 'material-ui/RaisedButton'\r\n\r\nclass ShowWhether extends Component {\r\n  state = {\r\n    current_city: '',\r\n    current_region: '',\r\n    current_country: '',\r\n    location: '',\r\n    temp_c: '',\r\n    options: {\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      stroke: {\r\n        curve: 'smooth'\r\n      },\r\n\r\n      title: {\r\n        text: 'Whether forecast',\r\n        align: 'center',\r\n        style: {\r\n          fontSize: '20px'\r\n        }\r\n      },\r\n      xaxis: {\r\n        type: 'datetime',\r\n\r\n        axisBorder: {\r\n          show: false\r\n        },\r\n        axisTicks: {\r\n          show: false\r\n        }\r\n      },\r\n      yaxis: {\r\n        tickAmount: 4,\r\n        floating: false,\r\n\r\n        labels: {\r\n          style: {\r\n            color: '#8e8da4',\r\n          },\r\n          offsetY: -7,\r\n          offsetX: 0,\r\n        },\r\n        axisBorder: {\r\n          show: false,\r\n        },\r\n        axisTicks: {\r\n          show: false\r\n        }\r\n      },\r\n      fill: {\r\n        opacity: 0.5,\r\n      },\r\n      tooltip: {\r\n        x: {\r\n          format: \"dd MMM\",\r\n        },\r\n        fixed: {\r\n          enabled: false,\r\n          position: 'topRight'\r\n        }\r\n      },\r\n      grid: {\r\n        yaxis: {\r\n          lines: {\r\n            offsetX: -30\r\n          }\r\n        },\r\n        padding: {\r\n          left: 20\r\n        }\r\n      }\r\n    },\r\n    series: [{\r\n      name: 'Temp(C)',\r\n      data: [{\r\n          x: \"2019-05-21\",\r\n          y: 0\r\n        },\r\n        {\r\n          x: \"2019-05-22\",\r\n          y: 0\r\n        },\r\n        {\r\n          x: \"2019-05-23\",\r\n          y: 0\r\n        },\r\n        {\r\n          x: \"2019-05-24\",\r\n          y: 0\r\n        },\r\n        {\r\n          x: \"2019-05-25\",\r\n          y: 0\r\n        },\r\n        {\r\n          x: \"2019-05-26\",\r\n          y: 0\r\n        },\r\n        {\r\n          x: \"2019-05-27\",\r\n          y: 0\r\n        },\r\n      ]\r\n    }],\r\n    errors: {\r\n      location: '',\r\n      forecast: '',\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.location()\r\n  }\r\n\r\n  location() {\r\n    axios.get(`https://geoip-db.com/json/`)\r\n      .then(res => {\r\n        \r\n        this.setState({location: res.data.city}, e => this.getTemp() )\r\n      })\r\n      .catch((err) => console.log('Location error'))\r\n\r\n  }\r\n\r\n  getTemp() {\r\n    axios.get(`https://api.apixu.com/v1/current.json?key=e084b62de6a1485dac6102538191805&q=${this.state.location}`)\r\n      .then(res => {\r\n        this.setState({\r\n          current_city: res.data.location.name,\r\n          current_region: res.data.location.region,\r\n          current_country: res.data.location.country,\r\n          temp_c: res.data.current.temp_c,\r\n          errors: {\r\n            location: '',\r\n          },\r\n        }, e => this.whetherForecast() )\r\n      })\r\n      .catch((err) => {\r\n        this.setState({\r\n          errors: {\r\n            location: `'${this.state.location}' NOT FOUND.`,\r\n          }\r\n        })\r\n      })\r\n\r\n  }\r\n\r\n  // setLocation = (e) => {\r\n  //   this.setState({location: e.target.value})\r\n  // }\r\n  handleChange = input => e => {\r\n    console.log('it changed')\r\n    this.setState({[input]: e.target.value})\r\n  }\r\n\r\n  seeTemp = (e) => {\r\n    e.preventDefault()\r\n    this.getTemp()\r\n  }\r\n\r\n  whetherForecast() {\r\n    console.log(this.state)\r\n    axios.post(`https://api.apixu.com/v1/forecast.json?key=e084b62de6a1485dac6102538191805&q=${this.state.current_city}&days=7`)\r\n      .then(res => {\r\n        this.setState({\r\n          series: [{\r\n            data: res.data.forecast.forecastday.map( value =>{\r\n              return {x: value.date,y:value.day.avgtemp_c}\r\n            })\r\n          }]\r\n        })\r\n      })      \r\n      .catch((err) => console.log('whether forecast err'))\r\n  }\r\n\r\n  render() {\r\n    let {temp_c, current_city, current_region, current_country, errors, location} = this.state\r\n    return (  \r\n      <div className=\"ShowWhether container\">\r\n        <MuiThemeProvider>\r\n          <React.Fragment>\r\n            <TextField hintText=\"Enter Your City\" onChange={this.handleChange('location')} floatingLabelText=\"Enter Your City\" value={location}\r\n              onKeyPress={(ev) => {\r\n                console.log(`Pressed keyCode ${ev.key}`);\r\n                if (ev.key === 'Enter') {\r\n                  // Do code here\r\n                  ev.preventDefault();\r\n                  this.submit()\r\n                }\r\n              }}\r\n            />\r\n\r\n            <RaisedButton\r\n              label=\"See Temp\"\r\n              primary={true}\r\n              style={styles.button}\r\n              onClick={this.seeTemp}\r\n            />\r\n          </React.Fragment>\r\n        </MuiThemeProvider>\r\n\r\n        <p>{errors.location}</p>\r\n        <div className=\"Output\">\r\n          <p>Location: {current_city}, {current_region}, {current_country}</p>\r\n          <p>Temp C: {temp_c}</p>\r\n        </div>\r\n        <Chart \r\n          options={this.state.options}\r\n          series={this.state.series}\r\n          type=\"area\"\r\n          height=\"450\"\r\n          width=\"100%\"\r\n        />\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\nconst styles = {\r\n  button: {\r\n    margin: '15px'\r\n  }\r\n}\r\n\r\n        // <form onSubmit={this.seeTemp} autoComplete=\"on\">\r\n        //   <input type='text' value={this.state.location} onChange={this.setLocation.bind(this)} />\r\n        //   <button type='submit'>See temp</button>\r\n        // </form>\r\nexport default ShowWhether;\r\n","import React, {Component} from 'react'\n\nimport ShowWhether from './components/showWhether'\nimport './App.css'\n\n\nclass App extends Component {\n\n  render() {\n    return (  \n      <div className=\"App\">\n        <div className='container'>\n          <h1>Whether App</h1>\n          <ShowWhether />\n        </div>\n      </div>\n    );\n  }\n}\n          // <Search update={this.update} />\n          // <Output temp_c={temp_c} current_city={current_city} current_region={current_region} current_country={current_country} />\n          // <WhetherChart current_city={current_city} />\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}